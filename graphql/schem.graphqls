"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
A directive used by the Apollo iOS code generation engine to generate custom import statements in operation or fragment definition files. An import statement to import a module with the name provided in the `module` argument will be added to the generated definition file.
"""
directive @import(
  """The name of the module to import."""
  module: String!
) repeatable on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

"""
Directs the executor to defer this fragment when the `if` argument is true or undefined.
"""
directive @defer(
  """Deferred when true or undefined."""
  if: Boolean

  """Unique name"""
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

type Ready {
  is_ready: Boolean!
}

type Result {
  result: String!
}

type CheckResponse {
  success: String!
}

type Response {
  token: String!
}

type ReadyResponse {
  message: String!
}

type ShakeResponse {
  message: String!
}

type UserID {
  user_id: String!
}

type RoomID {
  room_id: String!
}

type MatchStatus {
  user_count: Int
  is_matched: Boolean
  room_id: String
  start_time: String
  setuna_time: String
}

type diffTime {
  difftime: String
}

input GetResult_input {
  room_id: String!
  score: Int!
  user_id: String!
}

input LoginUser_input {
  email: String!
  password: String!
}

input RegisterUser_input {
  email: String!
  name: String!
  password: String!
}

input ShakePower_input {
  power: Int!
}

type Query {
  foo: String!
  check: CheckResponse!
  get_userID: UserID!
  get_rooms: [String]
}

type Mutation {
  post_login(email: String!, password: String!): Response
  post_register(email: String!, name: String!, password: String!): Response
  scheduleOperation(name: String!): String!
  post_matching(is_leave: Boolean!): MatchStatus
  post_result(room_id: String!, score: Int!): Result
  post_ready(room_id: String!): diffTime
  post_ranking(room_id: String!): Result
}

type Subscription {
  operationFinished: Operation!
  post_matching: String!
}

type Operation {
  name: String!
  endDate: String!
}